{"version":3,"sources":["backend_api.js","GeneratedImageList.js","TextPromptInput.js","BackendUrlInput.js","utils.js","LoadingSpinner.js","App.js","serviceWorker.js","index.js"],"names":["backendUrl","text","numImages","queryStartTime","Date","Promise","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","statusText","_","reject","setTimeout","race","Math","round","Number","EPSILON","JsonBigint","parse","catch","withStyles","generatedImg","borderRadius","classes","generatedImages","promptText","ImageObject","imgData","index","imgSrc","alt","downloadedFilename","href","title","download","src","className","Grid","container","alignItems","spacing","map","item","key","inputPrompt","marginTop","enterPressedCallback","disabled","setPromptText","TextField","id","label","helperText","placeholder","value","onChange","event","target","fullWidth","onKeyPress","inputBackend","minWidth","loadingSpinner","paddingTop","setBackendValidUrl","isValidBackendEndpoint","setIsValidBackendEndpoint","isCheckingBackendEndpoint","setIsCheckingBackendEndpoint","useState","setBackendUrl","newBackendUrl","str","RegExp","test","checkIfValidBackend","isValid","useEffect","qsBackendUrl","qs","window","location","search","ignoreQueryPrefix","alignContent","xs","error","sizeUnit","size","color","loading","processingSteps","root","display","flexDirection","textAlign","loadingText","isLoading","textIdx","setTextIdx","intervalID","length","clearInterval","Typography","variant","width","margin","marginBottom","playgroundSection","flex","justifyContent","settingsSection","padding","maxWidth","searchQueryCard","imagesPerQueryControl","formControl","gallery","height","isFetchingImgs","setIsFetchingImgs","setGeneratedImages","apiError","setApiError","imagesPerQuery","setImagesPerQuery","queryTime","setQueryTime","validBackendUrl","role","aria-label","Card","CardContent","console","log","callDalleService","message","FormControl","InputLabel","Select","labelId","Array","from","keys","num","MenuItem","FormHelperText","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9c0bec05.chunk.js","sourcesContent":["import JsonBigint from \"json-bigint\";\n\nconst REQUEST_TIMEOUT_SEC = 600000\n\nexport async function callDalleService(backendUrl, text, numImages) {\n    const queryStartTime = new Date()\n    const response = await Promise.race([\n        (await fetch(backendUrl + `/dalle`, {\n                method: 'POST',\n                headers: {\n                    'Bypass-Tunnel-Reminder': \"go\",\n                    'mode': 'no-cors'\n                },\n                body: JSON.stringify({\n                    text,\n                    'num_images': numImages,\n                })\n            }\n        ).then((response) => {\n            if (!response.ok) {\n                throw Error(response.statusText);\n            }\n            return response\n        })).text(), new Promise((_, reject) => setTimeout(\n            () => reject(new Error('Timeout')), REQUEST_TIMEOUT_SEC))\n    ]);\n\n\n    return {\n        'executionTime': Math.round(((new Date() - queryStartTime) / 1000 + Number.EPSILON) * 100) / 100,\n        'generatedImgs': JsonBigint.parse(response)\n    }\n}\n\nexport async function checkIfValidBackend(backendUrl) {\n    return await fetch(backendUrl, {\n        headers: {\n            'Bypass-Tunnel-Reminder': \"go\",\n            'mode': 'no-cors'\n        }\n    }).then(function (response) {\n        return true\n    }).catch(() => {\n        return false\n    })\n}\n","import React from 'react';\nimport { Grid } from \"@material-ui/core\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\n\nconst useStyles = () => ({\n    generatedImg: {\n        borderRadius: '8px',\n    },\n});\n\nconst GeneratedImageList = ({ classes, generatedImages, promptText }) => {\n\n    const ImageObject = ({ imgData, promptText, index }) => {\n        const imgSrc = `data:image/png;base64,${imgData}`\n        const alt = `${promptText} ${index}`\n        const title= \"Download image\"\n        const downloadedFilename = promptText + \"_\" + index + \".jpeg\"\n        \n        return (\n            <a href={imgSrc} alt={alt} title={title} download={downloadedFilename}>\n                <img src={imgSrc} className={classes.generatedImg} alt={alt} title={title} />\n            </a>\n        )\n    }\n\n\n    return (\n        <Grid container alignItems=\"center\" spacing={3}>\n            {generatedImages.map((generatedImg, index) => {\n                return (\n                    <Grid item key={index}>\n                        <ImageObject imgData={generatedImg} promptText={promptText} index={++index}/>\n                    </Grid>\n                )\n            })}\n        </Grid>\n    )\n}\n\nexport default withStyles(useStyles)(GeneratedImageList)","import React, { useState } from \"react\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport { TextField } from \"@material-ui/core\";\n\nconst useStyles = () => ({\n    inputPrompt: {\n        marginTop: '20px',\n    },\n})\n\nconst TextPromptInput = ({ classes, enterPressedCallback, disabled, promptText, setPromptText }) => {\n    function handleTextPromptKeyPressed(event) {\n        if (event.key === 'Enter') {\n            enterPressedCallback(promptText)\n        }\n    }\n\n    function onTextChanged(event) {\n        setPromptText(event.target.value)\n    }\n\n    return (\n        <TextField className={classes.inputPrompt} id=\"prompt-input\" label=\"Text prompt\"\n            helperText=\"hit Enter to generate images\"\n            placeholder=\"e.g. an apple on a table\" value={promptText}\n            onChange={onTextChanged} fullWidth\n            onKeyPress={handleTextPromptKeyPressed} disabled={disabled} />\n    )\n}\n\nexport default withStyles(useStyles)(TextPromptInput);\n","import React, {useEffect, useState} from \"react\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport {Grid, TextField} from \"@material-ui/core\";\nimport {isValidURL} from \"./utils\";\nimport {PulseLoader} from \"react-spinners\";\nimport qs from \"qs\";\nimport {checkIfValidBackend} from \"./backend_api\";\n\nconst useStyles = () => ({\n    inputBackend: {\n        minWidth: '220px',\n    },\n    loadingSpinner: {\n        paddingTop: '20px !important',\n    }\n})\n\nconst BackendUrlInput = ({\n                             classes, disabled, setBackendValidUrl,\n                             isValidBackendEndpoint, setIsValidBackendEndpoint,\n                             isCheckingBackendEndpoint, setIsCheckingBackendEndpoint,\n                         }) => {\n    const [backendUrl, setBackendUrl] = useState('');\n\n    useEffect(() => {\n        const qsBackendUrl = qs.parse(window.location.search, {ignoreQueryPrefix: true}).backendUrl\n        if (qsBackendUrl) {\n            onChange(qsBackendUrl)\n        }\n    }, [setBackendUrl])\n\n    function onChange(newBackendUrl) {\n        if (isValidURL(newBackendUrl)) {\n            setIsCheckingBackendEndpoint(true)\n            checkIfValidBackend(newBackendUrl).then((isValid) => {\n                setIsValidBackendEndpoint(isValid)\n                if (isValid) {\n                    setBackendValidUrl(newBackendUrl)\n                }\n                setIsCheckingBackendEndpoint(false)\n            }).catch(() => {\n                setIsCheckingBackendEndpoint(false)\n            })\n        } else {\n            setIsValidBackendEndpoint(false)\n        }\n\n        setBackendUrl(newBackendUrl)\n    }\n\n    return (\n        <Grid container spacing={1} alignContent=\"center\">\n            <Grid item xs={10}>\n                <TextField className={classes.inputBackend} fullWidth id=\"standard-basic\"\n                           label=\"Backend URL\" value={backendUrl} disabled={disabled}\n                           error={!isValidBackendEndpoint && backendUrl !== ''}\n                           helperText={!isValidBackendEndpoint && backendUrl !== '' && \"No running DALL-E server with this URL\"}\n                           onChange={(event) => onChange(event.target.value)}/>\n            </Grid>\n            {isCheckingBackendEndpoint && <Grid item className={classes.loadingSpinner} xs={2}>\n                <PulseLoader sizeUnit={\"px\"} size={5} color=\"purple\"\n                             loading={isCheckingBackendEndpoint}/>\n            </Grid>}\n        </Grid>\n    )\n}\n\nexport default withStyles(useStyles)(BackendUrlInput);\n","export function isValidURL(str) {\n  const pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\n    '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\n    '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\n    '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\n    '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\n    '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\n  return !!pattern.test(str);\n}","import {PulseLoader} from \"react-spinners\";\nimport {Typography} from \"@material-ui/core\";\nimport React, {useEffect, useState} from \"react\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\n\nconst useStyles = () => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        textAlign: 'center',\n        marginTop: '80px',\n    },\n    loadingText: {\n        paddingTop: '20px',\n    }\n});\n\nconst processingSteps = ['Generating images 👨🏽‍🎨', 'Doing fancy calculations ✨'];\n\nconst LoadingSpinner = ({classes, isLoading}) => {\n    const [textIdx, setTextIdx] = useState(0);\n\n    useEffect(() => {\n        const intervalID = setTimeout(() => {\n            let currentIdx = textIdx;\n            if (currentIdx + 1 < processingSteps.length) {\n                setTextIdx(currentIdx + 1)\n            }\n\n        }, 10000);\n\n        return () => clearInterval(intervalID);\n    }, []);\n\n    const loadingText = processingSteps[textIdx % processingSteps.length];\n    return (\n        <div className={classes.root}>\n            <PulseLoader sizeUnit={\"px\"} size={20} color=\"purple\" loading={isLoading}/>\n            <Typography className={classes.loadingText} variant={\"h6\"}>{loadingText}</Typography>\n        </div>\n    )\n}\n\nexport default withStyles(useStyles)(LoadingSpinner)","import React, { useState } from 'react';\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport {\n    Card, CardContent, FormControl, FormHelperText,\n    InputLabel, MenuItem, Select, Typography\n} from \"@material-ui/core\";\nimport { callDalleService } from \"./backend_api\";\nimport GeneratedImageList from \"./GeneratedImageList\";\nimport TextPromptInput from \"./TextPromptInput\";\n\nimport \"./App.css\";\nimport BackendUrlInput from \"./BackendUrlInput\";\nimport LoadingSpinner from \"./LoadingSpinner\";\n\nconst useStyles = () => ({\n    root: {\n        display: 'flex',\n        width: '100%',\n        flexDirection: 'column',\n        margin: '60px 0px 60px 0px',\n        alignItems: 'center',\n        textAlign: 'center',\n    },\n    title: {\n        marginBottom: '20px',\n    },\n    playgroundSection: {\n        display: 'flex',\n        flex: 1,\n        width: '100%',\n        alignItems: 'flex-start',\n        justifyContent: 'center',\n        marginTop: '20px',\n    },\n    settingsSection: {\n        display: 'flex',\n        flexDirection: 'column',\n        padding: '1em',\n        maxWidth: '300px',\n    },\n    searchQueryCard: {\n        marginBottom: '20px'\n    },\n    imagesPerQueryControl: {\n        marginTop: '20px',\n    },\n    formControl: {\n        margin: \"20px\",\n        minWidth: 120,\n    },\n    gallery: {\n        display: 'flex',\n        flex: '1',\n        maxWidth: '50%',\n        height: '100%',\n        justifyContent: 'center',\n        alignItems: 'flex-start',\n        padding: '1rem',\n    },\n});\n\n\nconst App = ({ classes }) => {\n    const [backendUrl, setBackendUrl] = useState('');\n    const [isFetchingImgs, setIsFetchingImgs] = useState(false);\n    const [isCheckingBackendEndpoint, setIsCheckingBackendEndpoint] = useState(false);\n    const [isValidBackendEndpoint, setIsValidBackendEndpoint] = useState(true);\n    const [generatedImages, setGeneratedImages] = useState([]);\n    const [apiError, setApiError] = useState('')\n    const [imagesPerQuery, setImagesPerQuery] = useState(2);\n    const [queryTime, setQueryTime] = useState(0);\n\n    const [promptText, setPromptText] = useState('');\n\n    const imagesPerQueryOptions = 10\n    const validBackendUrl = isValidBackendEndpoint && backendUrl\n\n    function enterPressedCallback(promptText) {\n        console.log('API call to DALL-E web service with the following prompt [' + promptText + ']');\n        setApiError('')\n        setIsFetchingImgs(true)\n        callDalleService(backendUrl, promptText, imagesPerQuery).then((response) => {\n            setQueryTime(response['executionTime'])\n            setGeneratedImages(response['generatedImgs'])\n            setIsFetchingImgs(false)\n        }).catch((error) => {\n            console.log('Error querying DALL-E service.', error)\n            if (error.message === 'Timeout') {\n                setApiError('Timeout querying DALL-E service (>1min). Consider reducing the images per query or use a stronger backend.')\n            } else {\n                setApiError('Error querying DALL-E service. Check your backend server logs.')\n            }\n            setIsFetchingImgs(false)\n        })\n    }\n\n    function getGalleryContent() {\n        if (apiError) {\n            return <Typography variant=\"h5\" color=\"error\">{apiError}</Typography>\n        }\n\n        if (isFetchingImgs) {\n            return <LoadingSpinner isLoading={isFetchingImgs} />\n        }\n\n        return <GeneratedImageList generatedImages={generatedImages} promptText={promptText} />\n    }\n\n    return (\n        <div className={classes.root}>\n            <div className={classes.title}>\n                <Typography variant=\"h3\">\n                    DALL-E Playground <span role=\"img\" aria-label=\"sparks-emoji\">✨</span>\n                </Typography>\n            </div>\n\n            {!validBackendUrl && <div>\n                <Typography variant=\"body1\" color=\"textSecondary\">\n                    Put your DALL-E backend URL to start\n                </Typography>\n            </div>}\n\n            <div className={classes.playgroundSection}>\n                <div className={classes.settingsSection}>\n                    <Card className={classes.searchQueryCard}>\n                        <CardContent>\n                            <BackendUrlInput setBackendValidUrl={setBackendUrl}\n                                isValidBackendEndpoint={isValidBackendEndpoint}\n                                setIsValidBackendEndpoint={setIsValidBackendEndpoint}\n                                setIsCheckingBackendEndpoint={setIsCheckingBackendEndpoint}\n                                isCheckingBackendEndpoint={isCheckingBackendEndpoint}\n                                disabled={isFetchingImgs} />\n                            <TextPromptInput enterPressedCallback={enterPressedCallback} promptText={promptText} setPromptText={setPromptText}\n                                disabled={isFetchingImgs || !validBackendUrl} />\n\n                            <FormControl className={classes.imagesPerQueryControl}\n                                variant=\"outlined\">\n                                <InputLabel id=\"images-per-query-label\">\n                                    Images to generate\n                                </InputLabel>\n                                <Select labelId=\"images-per-query-label\"\n                                        label=\"Images per text prompt\" value={imagesPerQuery}\n                                        disabled={isFetchingImgs}\n                                        onChange={(event) => setImagesPerQuery(event.target.value)}>\n                                    {Array.from(Array(imagesPerQueryOptions).keys()).map((num) => {\n                                        return <MenuItem key={num + 1} value={num + 1}>\n                                            {num + 1}\n                                        </MenuItem>\n                                    })}\n                                </Select>\n                                <FormHelperText>More images = More time to generate</FormHelperText>\n                            </FormControl>\n                        </CardContent>\n                    </Card>\n                    {queryTime !== 0 && <Typography variant=\"body2\" color=\"textSecondary\">\n                        Generation execution time: {queryTime} sec\n                    </Typography>}\n                </div>\n                {(generatedImages.length > 0 || apiError || isFetchingImgs) &&\n                    <div className={classes.gallery}>\n                        {getGalleryContent()}\n                    </div>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default withStyles(useStyles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}